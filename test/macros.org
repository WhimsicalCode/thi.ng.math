#+SETUPFILE: ../src/setup.org

* Contents                                                         :toc_3_gh:
 - [[#thingmathtestmacros][thi.ng.math.test.macros]]
     - [[#math-ops][Math ops]]
     - [[#binary-ops][Binary ops]]
     - [[#interpolation][Interpolation]]
     - [[#namespace-declaration][Namespace declaration]]

* thi.ng.math.test.macros
** Math ops

#+BEGIN_SRC clojure :noweb-ref tests
  (deftest test-add
    (is (== 5 (m/add 2.0 3.0)))
    (is (== 9 (m/add 2.0 3.0 4.0)))
    (is (== 14 (m/add 2.0 3.0 4.0 5.0)))
    (is (== 20 (m/add 2.0 3.0 4.0 5.0 6.0)))
    (is (== 27 (m/add 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 35 (m/add 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 44 (m/add 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-sub
    (is (== -1 (m/sub 2.0 3.0)))
    (is (== -5 (m/sub 2.0 3.0 4.0)))
    (is (== -10 (m/sub 2.0 3.0 4.0 5.0)))
    (is (== -16 (m/sub 2.0 3.0 4.0 5.0 6.0)))
    (is (== -23 (m/sub 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== -31 (m/sub 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== -40 (m/sub 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-mul
    (is (== 6 (m/mul 2.0 3.0)))
    (is (== 24 (m/mul 2.0 3.0 4.0)))
    (is (== 120 (m/mul 2.0 3.0 4.0 5.0)))
    (is (== 720 (m/mul 2.0 3.0 4.0 5.0 6.0)))
    (is (== 5040 (m/mul 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 40320 (m/mul 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 362880 (m/mul 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-div
    (is (== (/ 2.0 3.0) (m/div 2.0 3.0)))
    (is (== (/ 2.0 3.0 4.0) (m/div 2.0 3.0 4.0)))
    (is (== (/ 2.0 3.0 4.0 5.0) (m/div 2.0 3.0 4.0 5.0)))
    (is (== (/ 2.0 3.0 4.0 5.0 6.0) (m/div 2.0 3.0 4.0 5.0 6.0)))
    (is (== (/ 2.0 3.0 4.0 5.0 6.0 7.0) (m/div 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== (/ 2.0 3.0 4.0 5.0 6.0 7.0 8.0) (m/div 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== (/ 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0) (m/div 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-madd
    (is (== 10 (m/madd 2.0 3.0 4.0)))
    (is (== 26 (m/madd 2.0 3.0 4.0 5.0)))
    (is (== 32 (m/madd 2.0 3.0 4.0 5.0 6.0)))
    (is (== 68 (m/madd 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 76 (m/madd 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 140 (m/madd 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-msub
    (is (== 2 (m/msub 2.0 3.0 4.0)))
    (is (== -14 (m/msub 2.0 3.0 4.0 5.0)))
    (is (== -20 (m/msub 2.0 3.0 4.0 5.0 6.0)))
    (is (== -56 (m/msub 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== -64 (m/msub 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== -128 (m/msub 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-addm
    (is (== 20 (m/addm 2.0 3.0 4.0)))
    (is (== 45 (m/addm 2.0 3.0 4.0 5.0)))
    (is (== 270 (m/addm 2.0 3.0 4.0 5.0 6.0)))
    (is (== 585 (m/addm 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 4680 (m/addm 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 9945 (m/addm 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-adddiv
    (is (== (/ 5.0 4.0) (m/adddiv 2.0 3.0 4.0)))
    (is (== (/ 5.0 9.0) (m/adddiv 2.0 3.0 4.0 5.0)))
    (is (== (/ 5.0 9.0 6.0) (m/adddiv 2.0 3.0 4.0 5.0 6.0)))
    (is (== (/ 5.0 9.0 13.0) (m/adddiv 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== (/ 5.0 9.0 13.0 8.0) (m/adddiv 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== (/ 5.0 9.0 13.0 17.0) (m/adddiv 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-subm
    (is (== -4 (m/subm 2.0 3.0 4.0)))
    (is (== 1 (m/subm 2.0 3.0 4.0 5.0)))
    (is (== 6 (m/subm 2.0 3.0 4.0 5.0 6.0)))
    (is (== -1 (m/subm 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== -8 (m/subm 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 1 (m/subm 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-subdiv
    (is (== (/ -1.0 4.0) (m/subdiv 2.0 3.0 4.0)))
    (is (== (/ -1.0 -1.0) (m/subdiv 2.0 3.0 4.0 5.0)))
    (is (== (/ -1.0 -1.0 6.0) (m/subdiv 2.0 3.0 4.0 5.0 6.0)))
    (is (== (/ -1.0 -1.0 -1.0) (m/subdiv 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== (/ -1.0 -1.0 -1.0 8.0) (m/subdiv 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== (/ -1.0 -1.0 -1.0 -1.0) (m/subdiv 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-maddsub
    (is (== 5 (m/maddsub 2.0 3.0 4.0 5.0)))
    (is (== 20 (m/maddsub 2.0 3.0 4.0 5.0 6.0)))
    (is (== -16 (m/maddsub 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 60 (m/maddsub 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== -4 (m/maddsub 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-msubadd
    (is (== 7 (m/msubadd 2.0 3.0 4.0 5.0)))
    (is (== -8 (m/msubadd 2.0 3.0 4.0 5.0 6.0)))
    (is (== 28 (m/msubadd 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== -48 (m/msubadd 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 16 (m/msubadd 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-addmsub
    (is (== 15 (m/addmsub 2.0 3.0 4.0 5.0)))
    (is (== 39 (m/addmsub 2.0 3.0 4.0 5.0 6.0)))
    (is (== 3 (m/addmsub 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 577 (m/addmsub 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 513 (m/addmsub 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
  
  (deftest test-submadd
    (is (== 1 (m/submadd 2.0 3.0 4.0 5.0)))
    (is (== 7 (m/submadd 2.0 3.0 4.0 5.0 6.0)))
    (is (== 43 (m/submadd 2.0 3.0 4.0 5.0 6.0 7.0)))
    (is (== 7 (m/submadd 2.0 3.0 4.0 5.0 6.0 7.0 8.0)))
    (is (== 71 (m/submadd 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0))))
#+END_SRC

** Binary ops

#+BEGIN_SRC clojure :noweb-ref tests
  (deftest bitmask
    (is (= 0x01 (m/bitmask pos? 1)))
    (is (= 0x03 (m/bitmask pos? 1 1)))
    (is (= 0x07 (m/bitmask pos? 1 1 1)))
    (is (= 0x0f (m/bitmask pos? 1 1 1 1)))
    (is (= 0x1f (m/bitmask pos? 1 1 1 1 1)))
    (is (= 0x3f (m/bitmask pos? 1 1 1 1 1 1)))
    (is (= 0x7f (m/bitmask pos? 1 1 1 1 1 1 1)))
    (is (= 0xff (m/bitmask pos? 1 1 1 1 1 1 1 1)))
    (is (= 0x55 (m/bitmask pos? 1 0 1 0 1 0 1 0)))
    (is (= 0xaa (m/bitmask pos? 0 1 0 1 0 1 0 1))))
#+END_SRC

** Interpolation

#+BEGIN_SRC clojure :noweb-ref tests
  (deftest mix
    (is (= 0.5  (m/mix 0 1 0.5)))
    (is (= 1.5  (m/mix 0 1 2 3 0.5 0.5)))
    (is (= 3.5  (m/mix 0 1 2 3 4 5 6 7 0.5 0.5 0.5))))
#+END_SRC

** Namespace declaration

#+BEGIN_SRC clojure :tangle ../babel/test/thi/ng/math/test/macros.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.math.test.macros
    #?@(:clj
        [(:require
          [clojure.test :refer :all]
          [thi.ng.math.macros :as m])]
        :cljs
        [(:require-macros
          [thi.ng.math.macros :as m])
         (:require
          [cemerick.cljs.test :refer-macros [is deftest]])]))

  <<tests>>
#+END_SRC
